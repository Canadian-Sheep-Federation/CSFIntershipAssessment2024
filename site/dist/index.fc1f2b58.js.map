{"mappings":"AAAA,oEAAoE;AACpE,eAAe;IACb,gDAAgD;IAChD,IAAI,QAAQ,SAAS,cAAc,CAAC,cAAc,QAAQ;IAE1D,+BAA+B;IAC/B,IAAI,SAAS,SAAS,cAAc,CAAC,UAAU,KAAK;IACpD,IAAI,QAAQ,SAAS,cAAc,CAAC,SAAS,KAAK;IAClD,IAAI,aAAa,SAAS,cAAc,CAAC,cAAc,KAAK;IAE5D,uBAAuB;IACvB,MAAM,MAAM,IAAI,OAAO,MAAM;IAE7B,+EAA+E;IAC/E,MAAM,MAAM,0BAA0B;QACpC,QAAQ;QACR,MAAM,KAAK,SAAS,CAAC;YACnB,UAAU,MAAM,OAAO;YACvB,YAAY,MAAM,QAAQ;YAC1B,aAAa,MAAM,aAAa;YAChC,cAAc,MAAM,eAAe;YACnC,aAAa,MAAM,WAAW;YAC9B,YAAY,MAAM,QAAQ;YAC1B,QAAQ;YACR,YAAY;YACZ,OAAO;YACP,YAAY;QACd;QACA,SAAS;YACP,gBAAgB;QAClB;IACF,GAAG,IAAI,CAAC,CAAA;QACN,wFAAwF;QACxF,IAAI,SAAS,MAAM,IAAI,KAAK;YAC1B,QAAQ,GAAG,CAAC;YACZ,cAAc;QAChB,OAAO,IAAI,SAAS,MAAM,IAAI,KAC5B,cAAc;IAElB;AACF;AAEA,sEAAsE;AACtE,eAAe,gBAAgB,EAAE;IAC/B,MAAM,MAAM,CAAC,sBAAsB,EAAE,GAAG,CAAC,EAAE;QACzC,QAAQ;QACR,SAAS;YACP,gBAAgB;QAClB;IACF;AACF;AAEA,+DAA+D;AAC/D,SAAS;IACP,MAAM,QAAQ,SAAS,cAAc,CAAC,SAAS,KAAK;IACpD,MAAM,4BAA4B,IAAI,gBAAgB;QAAE,SAAS;IAAM,IAAI;QAAE,QAAQ;IAAM,GACxF,IAAI,CAAC,CAAA;QAAa,OAAO,QAAQ,IAAI;IAAG,GACxC,IAAI,CAAC,CAAA;QACJ,iBAAiB;IACnB;AACJ","sources":["src/js/apiActions.js"],"sourcesContent":["// Sending POST Request data to API when Favourite form is submitted\nasync function sendData() {\n  // getting drinkObj stored in the drink-info div\n  let drink = document.getElementById(\"drink-info\").drinkObj;\n\n  // getting user inputted values\n  let rating = document.getElementById(\"rating\").value;\n  let notes = document.getElementById(\"notes\").value;\n  let difficulty = document.getElementById(\"difficulty\").value;\n\n  // getting current date\n  const utc = new Date().toJSON();\n\n  // sending POST request to cocktail list API to add an item with specified body\n  await fetch(\"http://localhost:3000/\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      drink_id: drink.idDrink,\n      drink_name: drink.strDrink,\n      drink_image: drink.strDrinkThumb,\n      instructions: drink.strInstructions,\n      ingredients: drink.ingredients,\n      glass_type: drink.strGlass,\n      rating: rating,\n      difficulty: difficulty,\n      notes: notes,\n      date_added: utc\n    }),\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    }\n  }).then(response => {\n    // checking if cocktail already exists in database or confirming that cocktail was added\n    if (response.status == 409) {\n      console.log(\"REACHED!!\");\n      toggleMessage(\"This cocktail has already been added.\");\n    } else if (response.status == 201) {\n      toggleMessage(\"Drink Added to your List!\");\n    }\n  });\n}\n\n// Sending Delete Request to API when user wants to delete a Favourite\nasync function deleteFavourite(id) {\n  await fetch(`http://localhost:3000/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    }\n  });\n}\n\n// Sending GET request to get all items based on selected order\nfunction loadAllFavourites() {\n  const order = document.getElementById(\"order\").value;\n  fetch(\"http://localhost:3000/?\" + new URLSearchParams({ orderBy: order }), { method: \"GET\" })\n    .then(results => { return results.json() })\n    .then(data => {\n      generateFavCards(data);\n    });\n}"],"names":[],"version":3,"file":"index.fc1f2b58.js.map","sourceRoot":"/__parcel_source_root/"}