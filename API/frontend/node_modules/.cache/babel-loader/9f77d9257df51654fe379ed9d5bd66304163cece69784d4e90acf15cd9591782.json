{"ast":null,"code":"const token = 'BQDSnhN0P-5BL_QKITaVrMAwwdV1yGGi5fS_LIqrijCtlR3gD5ZgZxp1_PCt4mARAWRtsRlMckOwVRB0HdBe7jo02Oz9UrP9k6sRuYGAszeVjqwNfQbgT6Ci3ZUluL3hKj3KW822M9fypj42SrDQ3mp_ui3jpkN_eAnGFM1o2Y75h4_EEaXN5yUbKXnuiTviH5z_UXdu-0VEkYDUrWk44ynNmfkoYMQzqSrGdpSMHYg1uxC4_YUmkePzHxwQBIb6YLCs';\nasync function fetchWebApi(endpoint, method, body) {\n  const res = await fetch(`https://api.spotify.com/${endpoint}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    },\n    method,\n    body: JSON.stringify(body)\n  });\n  return await res.json();\n}\nasync function search(q, type) {\n  if (type == \"genre\") {\n    //return searchArtist(q);\n  } else if (type == \"artist\") {\n    return searchArtist(q);\n  } else {\n    return searchTrack(q);\n  }\n}\nasync function searchArtist(q) {\n  // Endpoint reference : https://developer.spotify.com/documentation/web-api/reference/search\n  //   q = \"taylor swift\"\n  qencoded = encodeURI(q);\n  return (await fetchWebApi(`v1/search?q=${qencoded}&type=artist&limit=1`, 'GET')).artists.items.at(0).uri;\n}\nasync function searchTrack(q) {\n  // Endpoint reference : https://developer.spotify.com/documentation/web-api/reference/search\n  qencoded = encodeURI(q);\n  return (await fetchWebApi(`v1/search?q=${qencoded}&type=track&limit=1`, 'GET')).tracks.items.at(0).uri;\n}\nasync function getSeedsGAT(seeds) {\n  genres_seed = \"\";\n  artists_seed = \"\";\n  tracks_seed = \"\";\n  for (var seed in seeds) {\n    if (seeds.at(seed).type == \"genre\") {\n      if (genres_seed != \"\") {\n        genres_seed += \",\";\n      }\n      genres_seed += seeds.at(seed).code;\n    } else if (seeds.at(seed).type == \"artist\") {\n      if (artists_seed != \"\") {\n        artists_seed += \",\";\n      }\n      artists_seed += seeds.at(seed).code;\n    } else {\n      if (tracks_seed != \"\") {\n        tracks_seed += \",\";\n      }\n      tracks_seed += seeds.at(seed).code;\n    }\n  }\n  return [genres_seed, artists_seed, tracks_seed];\n}\nasync function createPlaylist(seeds, min_bpm, max_bpm) {\n  // Endpoint reference : https://developer.spotify.com/documentation/web-api/reference/search\n  console.log(seeds);\n  const seeds_gat = await getSeedsGAT(seeds);\n  console.log(seeds_gat);\n  genres_encoded = \"\";\n  artists_encoded = \"\";\n  tracks_encoded = \"\";\n  if (seeds_gat.at(0) != \"\") {\n    genres_encoded = `&seed_genres=${encodeURI(seeds_gat.at(0))}`;\n  }\n  if (seeds_gat.at(1) != \"\") {\n    artists_encoded = `&seed_artists=${encodeURI(seeds_gat.at(1))}`;\n  }\n  if (seeds_gat.at(2) != \"\") {\n    tracks_encoded = `&seed_tracks=${encodeURI(seeds_gat.at(2))}`;\n  }\n  // console.log(`v1/recommendations?limit=20${artists_encoded}${genres_encoded}${tracks_encoded}&min_tempo=${min_bpm}&max_tempo=${max_bpm}'`);\n  return (await fetchWebApi(`v1/recommendations?limit=20${artists_encoded}${genres_encoded}${tracks_encoded}&min_tempo=${min_bpm}&max_tempo=${max_bpm}`, 'GET')).tracks;\n}\n(async () => {\n  try {\n    var seedsTest = [{\n      code: \"0kbYTNQb4Pb1rPbbaF0pT4\",\n      type: \"artist\"\n    }, {\n      code: \"pop\",\n      type: \"genre\"\n    }, {\n      code: \"0c6xIDDpzE81m2q797ordA\",\n      type: \"track\"\n    }, {\n      code: \"rock\",\n      type: \"genre\"\n    }];\n    // console.log(\"function called\");\n    const recommendedTracks = await createPlaylist(seedsTest, 120, 140);\n    // console.log(recommendedTracks);\n    console.log(recommendedTracks.map(({\n      name,\n      artists\n    }) => `${name} by ${artists.map(artist => artist.name).join(', ')}`));\n  } catch (e) {\n    // Deal with the fact the chain failed\n  }\n})();","map":{"version":3,"names":["token","fetchWebApi","endpoint","method","body","res","fetch","headers","Authorization","JSON","stringify","json","search","q","type","searchArtist","searchTrack","qencoded","encodeURI","artists","items","at","uri","tracks","getSeedsGAT","seeds","genres_seed","artists_seed","tracks_seed","seed","code","createPlaylist","min_bpm","max_bpm","console","log","seeds_gat","genres_encoded","artists_encoded","tracks_encoded","seedsTest","recommendedTracks","map","name","artist","join","e"],"sources":["C:/Users/jamie/Documents/API/frontend/src/SpotifyAPI.js"],"sourcesContent":["\r\nconst token = 'BQDSnhN0P-5BL_QKITaVrMAwwdV1yGGi5fS_LIqrijCtlR3gD5ZgZxp1_PCt4mARAWRtsRlMckOwVRB0HdBe7jo02Oz9UrP9k6sRuYGAszeVjqwNfQbgT6Ci3ZUluL3hKj3KW822M9fypj42SrDQ3mp_ui3jpkN_eAnGFM1o2Y75h4_EEaXN5yUbKXnuiTviH5z_UXdu-0VEkYDUrWk44ynNmfkoYMQzqSrGdpSMHYg1uxC4_YUmkePzHxwQBIb6YLCs';\r\n\r\nasync function fetchWebApi(endpoint, method, body) {\r\n  const res = await fetch(`https://api.spotify.com/${endpoint}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n    method,\r\n    body:JSON.stringify(body)\r\n  });\r\n  return await res.json();\r\n}\r\n\r\nasync function search(q, type){\r\n    if (type == \"genre\"){\r\n        //return searchArtist(q);\r\n    }\r\n    else if (type == \"artist\"){\r\n        return searchArtist(q);\r\n    }\r\n    else{\r\n        return searchTrack(q);\r\n    }\r\n}\r\n\r\nasync function searchArtist(q){\r\n  // Endpoint reference : https://developer.spotify.com/documentation/web-api/reference/search\r\n//   q = \"taylor swift\"\r\n  qencoded = encodeURI(q);\r\n  return (await fetchWebApi(\r\n    `v1/search?q=${qencoded}&type=artist&limit=1`, 'GET'\r\n  )).artists.items.at(0).uri;\r\n}\r\n\r\nasync function searchTrack(q){\r\n    // Endpoint reference : https://developer.spotify.com/documentation/web-api/reference/search\r\n    qencoded = encodeURI(q);\r\n    return (await fetchWebApi(\r\n      `v1/search?q=${qencoded}&type=track&limit=1`, 'GET'\r\n    )).tracks.items.at(0).uri;\r\n}\r\n\r\nasync function getSeedsGAT(seeds){\r\n    genres_seed = \"\";\r\n    artists_seed = \"\";\r\n    tracks_seed = \"\";\r\n    for (var seed in seeds){\r\n        if (seeds.at(seed).type == \"genre\"){\r\n            if (genres_seed != \"\"){\r\n                genres_seed += \",\";\r\n            } \r\n            genres_seed += seeds.at(seed).code;\r\n        }\r\n        else if (seeds.at(seed).type == \"artist\"){\r\n            if (artists_seed != \"\"){\r\n                artists_seed += \",\";\r\n            }\r\n            artists_seed += seeds.at(seed).code;\r\n        }\r\n        else{\r\n            if (tracks_seed != \"\"){\r\n                tracks_seed += \",\";\r\n            }\r\n            tracks_seed += seeds.at(seed).code;\r\n        }\r\n    }\r\n    return [genres_seed, artists_seed, tracks_seed];\r\n}\r\n\r\nasync function createPlaylist(seeds, min_bpm, max_bpm){\r\n    // Endpoint reference : https://developer.spotify.com/documentation/web-api/reference/search\r\n    console.log(seeds);\r\n    const seeds_gat = await getSeedsGAT(seeds);\r\n    console.log(seeds_gat);\r\n    genres_encoded = \"\";\r\n    artists_encoded = \"\";\r\n    tracks_encoded = \"\";\r\n    if (seeds_gat.at(0) != \"\"){\r\n        genres_encoded = `&seed_genres=${encodeURI(seeds_gat.at(0))}`;\r\n    }\r\n    if (seeds_gat.at(1) != \"\"){\r\n        artists_encoded = `&seed_artists=${encodeURI(seeds_gat.at(1))}`;\r\n    }\r\n    if (seeds_gat.at(2) != \"\"){\r\n        tracks_encoded = `&seed_tracks=${encodeURI(seeds_gat.at(2))}`;\r\n    }\r\n    // console.log(`v1/recommendations?limit=20${artists_encoded}${genres_encoded}${tracks_encoded}&min_tempo=${min_bpm}&max_tempo=${max_bpm}'`);\r\n    return (await fetchWebApi(\r\n      `v1/recommendations?limit=20${artists_encoded}${genres_encoded}${tracks_encoded}&min_tempo=${min_bpm}&max_tempo=${max_bpm}`, 'GET'\r\n    )).tracks;\r\n}\r\n\r\n(async () => {\r\n    try {\r\n        var seedsTest = [\r\n            {code: \"0kbYTNQb4Pb1rPbbaF0pT4\", type: \"artist\"},\r\n            {code: \"pop\", type: \"genre\"},\r\n            {code: \"0c6xIDDpzE81m2q797ordA\", type: \"track\"},\r\n            {code: \"rock\", type: \"genre\"}\r\n        ];\r\n        // console.log(\"function called\");\r\n        const recommendedTracks = await createPlaylist(seedsTest, 120, 140);\r\n        // console.log(recommendedTracks);\r\n        console.log(\r\n            recommendedTracks.map(\r\n            ({name, artists}) =>\r\n              `${name} by ${artists.map(artist => artist.name).join(', ')}`\r\n          )\r\n        );\r\n    } catch (e) {\r\n        // Deal with the fact the chain failed\r\n    }\r\n})();\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}